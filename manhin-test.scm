(use-modules (opencog) (opencog bioscience))

(primitive-load "kbs/biogrid_gene_gene_3.5.177.scm")
(primitive-load "kbs/GO.scm")
(primitive-load "kbs/Go-Plus.scm")
(primitive-load "kbs/GO_annotation.scm")
(primitive-load "kbs/NCBI2Reactome_PE_Pathway.txt.scm")
(primitive-load "kbs/reactome.scm")
(primitive-load "kbs/smpdb_gene.scm")
(primitive-load "results/manhin-preprocessing.scm")
(primitive-load "results/intsim.scm")

(define (get-go go)
  (define iset (cog-incoming-set (Concept go)))
  (define memb (filter (lambda (x) (equal? (cog-type x) 'MemberLink)) iset))
  (define sub (filter (lambda (x) (equal? (cog-type x) 'SubsetLink)) iset))
  (define att (filter (lambda (x) (equal? (cog-type x) 'AttractionLink)) iset))
  (display
    (format #t "~a\n~a\n~a\nLength of Member: ~a\nLength of Subset: ~a\nLength of Attraction: ~a\n\n"
      memb sub att (length memb) (length sub) (length att))))

; ----------
(use-modules (ice-9 rdelim) (srfi srfi-1))

(define go-pairs (list))
(define pln-results (list))
(define dw-results (list))

(call-with-input-file "pln_results_all.txt"
  (lambda (fp)
    (let ((line (read-line fp)))
      (while (not (eof-object? line))
        (let* ((contents (string-split line #\,))
               (go1 (list-ref contents 0))
               (go2 (list-ref contents 1))
               (go-pair (string-join (list go1 go2) ","))
               (result (list-ref contents 2)))
          (set! go-pairs (append go-pairs (list (cons go1 go2))))
          (set! pln-results (assoc-set! pln-results go-pair result))
        )
        (set! line (read-line fp))
      )
    )
  )
)

(call-with-input-file "dw_results_all.txt"
  (lambda (fp)
    (let ((line (read-line fp)))
      (while (not (eof-object? line))
        (let* ((contents (string-split line #\,))
               (go1 (list-ref contents 0))
               (go2 (list-ref contents 1))
               (go-pair (string-join (list go1 go2) ","))
               (result (list-ref contents 2)))
          (set! go-pairs (append go-pairs (list (cons go1 go2))))
          (set! dw-results (assoc-set! dw-results go-pair result))
        )
        (set! line (read-line fp))
      )
    )
  )
)

(set! go-pairs (delete-duplicates go-pairs))
(format #t "Total no. of pairs: ~a\n" (length go-pairs))

(define (get-results margin)
  (define match-cnt 0)
  (define mismatch-cnt 0)

  (do ((i 0 (1+ i)))
      ((= i (length go-pairs)))
    (let* ((pair (list-ref go-pairs i))
           (go1 (car pair))
           (go2 (cdr pair))
           (k1 (format #f "~a,~a" go1 go2))
           (k2 (format #f "~a,~a" go2 go1))
           (pln-r1 (assoc-ref pln-results k1))
           (pln-r2 (assoc-ref pln-results k2))
           (dw-r1 (assoc-ref dw-results k1))
           (dw-r2 (assoc-ref dw-results k2))
           (pln-result (if pln-r1 pln-r1 pln-r2))
           (dw-result (if dw-r1 dw-r1 dw-r2)))
      (if (<= (abs (- (string->number pln-result) (string->number dw-result))) margin)
        (set! match-cnt (1+ match-cnt))
        (set! mismatch-cnt (1+ mismatch-cnt))
      )
    )
  )

  (format #t "Match: ~a (~a%)\nMismatch: ~a\n" match-cnt (exact->inexact (/ match-cnt (length go-pairs))) mismatch-cnt)
)

(get-results 0.1)
